const fs = require("fs")
const Path = require("path")
const esbuild = require("esbuild-wasm")
const argv = process.argv.slice(1)

const prog    = Path.relative(process.cwd(), __filename)
const infiles = {
  worker: "src/app/worker-template.js",
  frame:  "src/app/worker-frame-template.js",
}
const outfile = "src/app/worker-template.ts"

process.chdir(__dirname + "/..")

async function main() {
  let out = await Promise.all(Object.keys(infiles).map(async (name) => {
    let infile = infiles[name]
    let parts = await genfile(infile)
    return [ name, infile, parts ]
  }))
  // console.log(out)

  let b = (
    `// Automatically generated by ${prog}.\n` +
    `// Do not edit manually -- instead, run ${prog}\n` +
    out.map(
      ([name, infile, parts]) =>
        `\n// ${infile}\n` +
        `export const ${name} = ${JSON.stringify(parts, null, 2)};`
    ).join("\n") +
    "\n"
  )
  // console.log(b)

  // write if needed
  let b1 = ""
  try {
    b1 = fs.readFileSync(outfile, "utf8")
  } catch (_) {}
  if (b1 != b) {
    console.log(`${prog}: write ${outfile}`)
    fs.writeFileSync(outfile, b, "utf8")
  }

}

async function genfile(infile) {
  let a = fs.readFileSync(infile, "utf8")

  let res = await esbuild.transform(a, {
    sourcefile: infile,
    loader: "js",
    target: "es2017",
    minifyWhitespace: true,
    minifyIdentifiers: false,
    minifySyntax: false,
  })
  for (let msg of res.warnings) {
    console.warn(`${infile}: warning: ${msg}`)
  }
  //console.log(res.js)

  let parts = res.code.split("$__JS__")
  if (infile == "src/app/worker-template.js") {
    // wrap $__JS__ in parenthesis
    parts = parts.map((part, i) => {
      if (i % 2 == 0) {
        part += "("
      } else {
        part = ")" + part
      }
      return part
    })
  }
  return parts
}


main()
