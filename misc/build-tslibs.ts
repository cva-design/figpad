import { readFileSync, writeFileSync, existsSync } from 'node:fs'
import { createHash } from 'node:crypto'
import { resolve, relative, basename, dirname } from 'node:path'
import { fileURLToPath } from 'node:url'

import createDebug from 'debug';
const debug = createDebug('build-tslibs');

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

const prog = relative(process.cwd(), __filename)
const outDir = (
  process.argv.length > 2 ? resolve(".", process.argv[2]) : "docs"
)

const cwd = process.cwd()
process.chdir(`${__dirname}/..`)

interface LibInfo {
  version: string
  filename: string
}

const libs: Record<string, LibInfo> = {}

let source = ""

// dom lib
source = `declare global {
  namespace WebDOM {${
    [
      readfile("node_modules/typescript/lib/lib.dom.d.ts"),
      readfile("node_modules/typescript/lib/lib.dom.iterable.d.ts")
    ]
    .join('\n')
    .replace(/declare\s+|\/\/\/\s*<reference[^\r\n]+/g, "")
  }
  }
} // global namespace WebDOM
`;

addLib("dom", "lib.dom.d.ts", source)

// webworker lib
source = readfile("node_modules/typescript/lib/lib.webworker.d.ts")

source = `declare global {
  namespace WebWorkerEnv {${
    source.replace(/declare\s+|\/\/\/\s*<reference[^\r\n]+/g, "")}
  }
} // global namespace WebWorkerEnv
`;

addLib("webworker", "lib.webworker.d.ts", source)

// scripter lib
source = readfile("src/common/scripter-env.d.ts")
addLib("scripter", "scripter-env.d.ts", source)

// figma lib
const figmaLib = "src/app/code/figma.d.ts"
source = readfile(figmaLib)
addLib("figma", basename(figmaLib), source)

// write src/app/tslibs.ts
const tsLibsFile = resolve(".", "src/app/tslibs.ts")

const libsJs = (
  `// Do not edit. Generated by ${prog}
  ${
    Object.keys(libs).map(jsname => {
      const js = JSON.stringify(libs[jsname], null, 2).replace(/^[\s]+"([^"]+)":/gm, "  $1:")
      return `export const ${jsname} = ${js};`
    })
    .join("\n")
  }
`)

writefileIfDifferent(tsLibsFile, libsJs)

function addLib(jsName: string, relFilename: string, content: string): void {
  const filename = resolve(outDir, relFilename)
  libs[jsName] = {
    filename: basename(relFilename),
    version: versionHash(content),
  }
  writefileIfDifferent(filename, content)
}

function versionHash(s: string): string {
  const h = createHash("sha1")
  h.update(s)
  return h.digest("base64").replace(/=+/g, "")
}

function readfile(filename: string): string {
  return readFileSync(filename, "utf8")
}

function writefileIfDifferent(filename: string, content: string): void {
  if (!existsSync(filename) || readfile(filename) !== content) {
    writefile(filename, content)
    console.log("  Updated:", relative(cwd, filename))
  }
  else {
    console.log("Unchanged:", relative(cwd, filename))
  }
}

function writefile(filename: string, content: string): void {
  debug("writeFile:", relative(cwd, filename))
  writeFileSync(filename, content, "utf8")
}
