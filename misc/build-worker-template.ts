import { readFileSync, writeFileSync } from 'node:fs'
import { relative, join } from 'node:path'
import { fileURLToPath } from 'node:url'
import * as esbuild from 'esbuild-wasm'

// const argv: string[] = process.argv.slice(1)

const prog: string = relative(process.cwd(), fileURLToPath(import.meta.url))

const inputFiles: Record<string, string> = {
  worker: "src/app/templates/worker-template.js",
  frame: "src/app/templates/worker-frame-template.js",
}

const outFile: string = "src/app/generated/worker-template.ts"

process.chdir(join(fileURLToPath(new URL('.', import.meta.url)), ".."))

async function main(): Promise<void> {
  const out = await Promise.all(Object.keys(inputFiles).map(async (name) => {
    const inFile = inputFiles[name]
    const parts = await generateFile(inFile)
    return [name, inFile, parts] as [string, string, string[]]
  }))

  const b = `
// Automatically generated by the build:worker npm script.
// Do not edit manually -- instead, \`run nr build:worker\`
${out.map(([name, inFile, parts]) => `
// ${inFile}
export const ${name} = ${JSON.stringify(parts, null, 2)};`).join("")}
`

  // write if needed
  let b1 = ""
  
  try {
    b1 = readFileSync(outFile, "utf8")
  } catch (_) {}

  if (b1 !== b) {
    console.log(`${prog}: write ${outFile}`)
    writeFileSync(outFile, b, "utf8")
  }
  else {
    console.log(`${prog}: ${outFile} is unchanged`)
  }
}

async function generateFile(inputFilePath: string): Promise<string[]> {
  const a = readFileSync(inputFilePath, "utf8")

  const res = await esbuild.transform(a, {
    sourcefile: inputFilePath,
    loader: "js",
    target: "es2017", 
    minifyWhitespace: true,
    minifyIdentifiers: false,
    minifySyntax: false,
  })
  
  for (const msg of res.warnings) {
    console.warn(`${inputFilePath}: warning: ${msg}`)
  }

  let parts = res.code.split("$__JS__")
  
  if (inputFilePath === inputFiles.worker) { // Fixed path comparison
    // wrap $__JS__ in parenthesis
    parts = parts.map((part, i) => {
      if (i % 2 === 0) {
        return `${part}(`
      }
      return `)${part}`
    })
  }
  return parts
}

main()
